removed_trait_bound
enum_variant
this_expression
throw_specifier
const
mod
do_statement
loop
+
do
auto
declaration
for_lifetimes
type_arguments
<=
enum_member_declaration_list
statement
struct_expression
|=
parameter_array
enumerator_list
U'
trait_bounds
by
defined
native
throws
null
#elif
identifier
use_as_clause
interface_body
function_item
operator_declaration
dynamic_type
constructor_initializer
friend_declaration
pointer_declarator
__clrcall
template_instantiation
scoped_type_identifier
preproc_arg
function_pointer_unmanaged_calling_convention
index_expression
descending
bracketed_type
declaration_list
return_expression
let_declaration
reference_type
ms_based_modifier
destructor_declaration
type_of_expression
remove
closure_parameters
void_keyword
block
assert_statement
try
base_class_clause
goto_statement
?
subpattern
parameter_list
attribute_specifier
signed
arguments
array_type
array_declarator
_literal_pattern
readonly
mod_item
select_clause
scoped_identifier
u8"
while_let_expression
explicit
tuple_type
reference_declarator
_literal
when_clause
interpolation
::
arrow_expression_clause
continue_expression
function_pointer_type
catch_formal_parameter
ref_type_expression
_unannotated_type
module_declaration
property
struct_item
compound_statement
using_directive
meta
mutable
trait_item
float_literal
crate
{
__reftype
#else
namespace_identifier
--
constructor_body
unsafe_block
break
pointer_expression
.
formal_parameter
qualified_type
scoped_field_identifier
default_expression
property_pattern_clause
enum_member_declaration
is
decltype
u8'
override
class_declaration
spread_parameter
function_pointer_calling_convention
unmanaged
wildcard
trait
case_pattern_switch_label
array_creation_expression
var
update_expression
abstract_reference_declarator
for_expression
floating_point_type
loop_label
assert
alias
<
requires_modifier
ternary_expression
_declaration_statement
simple_assignment_expression
type_identifier
base_expression
empty_statement
__fastcall
octal_integer_literal
mutable_specifier
compilation_unit
preproc_def
return
assembly
qualified_name
^
extern_alias_directive
preprocessor_directive
add
base
ms_call_modifier
type_pattern
variable_declaration
modifier
protected
char_literal
async_block
metavariable
ref
catch_filter_clause
if_let_expression
to
volatile
case_statement
group_clause
dependent_type
macro_type_specifier
switch_statement
parenthesized_pattern
abstract_function_declarator
let_clause
_type_declarator
opens
||
_type
default
unsigned
method_reference
query_continuation
finally_clause
-=
for_each_statement
template
declaration_pattern
parenthesized_expression
negated_pattern
generic_type_with_turbofish
Fastcall
delete_expression
variadic_parameter_declaration
instanceof
fixed_statement
switch_body
type_bound
preprocessor_call
>
double
vis
field_declaration
short
variadic_declarator
expression_statement
function_declarator
query_expression
abstract
where_clause
checked_expression
ascending
visibility_modifier
unsafe
goto
positional_pattern_clause
when
default_switch_label
]]
ty
global_attribute_list
parameter
alias_qualified_name
_Atomic
__attribute__
enum_constant
|
u'
interpolated_string_expression
delegate_declaration
subscript_designator
??
optional_type_parameter_declaration
namespace
function_signature_item
type_binding
this
catch_declaration
~
ms_unsigned_ptr_modifier
type_constraint
literal
[
ref_value_expression
return_statement
shorthand_field_initializer
alias_declaration
parameter_pack_expansion
resource
virtual
U"
scoped_namespace_identifier
abstract_type
for_statement
enum
switch_label
comment
generic_type
implicit_stack_alloc_array_creation_expression
preproc_ifdef
L'
formal_parameters
checked
template_function
tuple_element
#if
foreign_mod_item
explicit_constructor_invocation
range_pattern
parenthesized_variable_designation
optional_type_parameter
stack_alloc_array_creation_expression
fixed
else
get
unit_expression
delete_method_clause
expr
while
%
linkage_specification
on
mut_pattern
self
number_literal
integral_type
""
field_pattern
lambda_default_capture
_declaration
field_designator
argument
tuple_pattern
register
constructor_declaration
block_comment
interface_declaration
synchronized
extern_modifier
binary_pattern
nullable_type
call_expression
orderby
lambda_expression
local_function_statement
name_equals
catch_clause
<<=
annotation_argument_list
inner_attribute_item
modifiers
function_pointer_parameter
union_specifier
field_access
union_item
module_directive
implements
#endif
transitive
is_pattern_expression
indexer_declaration
base_list
...
Stdcall
expression
enum_declaration
char
interpolated_verbatim_string_text
internal
element_value_pair
binary_integer_literal
equals
remaining_field_pattern
&=
await_expression
impl
__unaligned
@
decimal_floating_point_literal
predefined_type
element_access_expression
ms_declspec_modifier
higher_ranked_trait_bound
interface_type_list
labeled_statement
unary_expression
unsafe_statement
array_rank_specifier
_unaligned
tt
implicit_object_creation_expression
super
function_modifiers
lock_statement
import_declaration
async
preproc_if
using_statement
sized_type_specifier
move
generic_function
>>>=
__declspec
field_initializer
where_predicate
as
->
lifetime
*
else_clause
object_creation_expression
switch_section
'
unit_type
use_wildcard
bracketed_argument_list
Thiscall
line_comment
nullptr
escape_sequence
"
global_statement
int
try_with_resources_statement
ordered_field_declaration_list
operator
lock
attribute_target_specifier
long
enum_specifier
sizeof_expression
open
join_clause
]
noexcept
extends
case
annotation
assignment_operator
using_declaration
case_switch_label
if_expression
reference_expression
preproc_elif
variable_declarator
try_statement
ms_restrict_modifier
let
bounded_type
field_expression
into
make_ref_expression
type
switch_expression
break_statement
$"
or_pattern
annotation_type_declaration
use
macro_rule
element_binding_expression
variadic_type_parameter_declaration
yield_statement
#
type_qualifier
partial
template_argument_list
float
type_item
!=
size_of_expression
subscript_expression
element_value_array_initializer
conditional_access_expression
conversion_operator_declaration
postfix_unary_expression
match_arm
$
closure_expression
from
/=
_field_declarator
static_item
array_initializer
self_parameter
continue
transient
<<
pat
preproc_include
exports
destructor_name
path
[[
meta_item
attribute_argument
interpolation_format_clause
finally
resource_specification
==
using
yield
annotation_type_body
type_descriptor
true
switch
preproc_function_def
preproc_else
empty_type
await
hex_floating_point_literal
in
struct_specifier
namespace_declaration
params
pub
typename
abstract_array_declarator
class_body
token_tree_pattern
event
equals_value_clause
variadic_parameter
asterisk
enum_body_declarations
enum_body
accessor_declaration
binary_expression
constant_declaration
if
out
macro_rules!
__thiscall
if_statement
preproc_defined
local_variable_declaration
_statement
shorthand_field_identifier
struct
__makeref
bracketed_parameter_list
boolean_literal
type_parameter_constraint
structured_binding_declarator
slice_pattern
strictfp
dyn
restrict
import
primary_expression
abstract_pointer_declarator
member_access_expression
new_expression
for_range_loop
u"
namespace_definition
compound_literal_expression
reference_pattern
tuple_expression
prefix_unary_expression
array_expression
parameter_modifier
condition_clause
__vectorcall
__based
event_declaration
type_parameter_list
>>>
type_argument_list
static_assert_declaration
public
typeof
anonymous_object_creation_expression
init
struct_pattern
instanceof_expression
trailing_return_type
param
type_parameter_declaration
template_parameter_list
field_declaration_list
captured_pattern
catch_type
or
extern_crate_declaration
constant_pattern
new_declarator
use_declaration
impl_item
;
dimensions
negative_literal
(
annotated_type
type_parameter
ref_expression
program
base_field_initializer
declaration_expression
initializer_pair
access_specifier
^=
)
class_specifier
static
lambda_capture_specifier
_pattern
,
=
event_field_declaration
/
&
%=
@$"
discard
relational_pattern
compound_assignment_expr
where
template_template_parameter_declaration
boolean_type
record_declaration
item
translation_unit
catch
cast_expression
member_binding_expression
token_tree
primitive_type
preproc_directive
match
and
initializer_expression
_abstract_declarator
>>
anonymous_method_expression
parenthesized_declarator
switch_block
explicit_function_specifier
virtual_specifier
enumerator
abstract_parenthesized_declarator
+=
module
label_name
throw_expression
match_block
with
from_clause
constructor_constraint
join_into_clause
recursive_pattern
concatenated_string
token_repetition
invocation_expression
macro_invocation
=>
marker_annotation
interpolated_string_text
break_expression
__cdecl
initializer_list
assignment_expression
while_expression
join
template_declaration
constexpr
token_repetition_pattern
foreach
operator_cast
super_interfaces
function_type
field_identifier
_
class_literal
loop_expression
system_lib_string
virtual_function_specifier
L"
delete
..=
field_initializer_list
nameof
match_pattern
package
method_declaration
token_binding_pattern
integer_literal
uses
for
>>=
sizeof
not
function_definition
package_declaration
implicit
struct_declaration
hex_integer_literal
attribute_list
const_item
switch_expression_arm
verbatim_string_literal
void_type
_declarator
preproc_params
continue_statement
*=
??=
local_declaration_statement
#include
:
{{
match_expression
final
__stdcall
statement_identifier
managed
type_parameter_constraints_clause
try_expression
tuple_struct_pattern
-
sealed
order_by_clause
@interface
byte
macro_definition
unchecked
inferred_parameters
static_initializer
__refvalue
class
stmt
character_literal
argument_list
>=
var_pattern
record
method_invocation
type_definition
dynamic
group
stackalloc
checked_statement
field
enum_item
const_parameter
interface
array_access
constrained_type_parameter
synchronized_statement
init_declarator
#define
enum_variant_list
..
new
ms_signed_ptr_modifier
pointer_type
associated_type
friend
set
throw_statement
static_assert
preproc_call
provides
generic_name
template_type
source_file
#ifndef
select
#ifdef
real_literal
fragment_specifier
++
attribute_argument_list
enhanced_for_statement
type_cast_expression
with_initializer_expression
bitfield_clause
conditional_expression
&&
ms_pointer_modifier
!
with_expression
meta_arguments
delegate
operator_name
scoped_use_list
receiver_parameter
primary_constructor_base_type
extends_interfaces
comma_expression
extern
ident
method
implicit_array_creation_expression
}
implicit_type
use_list
name_colon
notnull
storage_class_specifier
range_expression
decimal_integer_literal
global
dimensions_expr
ms_unaligned_ptr_modifier
annotation_type_element_declaration
$@"
superclass
false
accessor_list
type_parameters
function_pointer_unmanaged_calling_convention_list
module_body
template_method
fn
null_literal
parameter_declaration
default_method_clause
property_declaration
string_literal
private
explicit_interface_specifier
while_statement
_type_specifier
Cdecl
optional_parameter_declaration
_simple_type
requires
ref_pattern
raw_string_literal
attribute_item
throw
interpolation_alignment_clause
_expression
union
parameters
typedef
attribute
inline
